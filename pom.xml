<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>dl-muatation-tagger</groupId>
	<artifactId>dl-muatation-tagger</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!-- <packaging>war</packaging> -->

	<properties>
		<!-- This is the default configuration file. You can change it by passing 
			-Dconfig.file=... while invoking mvn -->
		<config.properties>config.cfg</config.properties>
		<packaging>${packaging.type}</packaging>
	</properties>

	<profiles>
		<profile>
			<id>webapp</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<packaging.type>war</packaging.type>
			</properties>
		</profile>
		<profile>
			<id>batch</id>
			<properties>
				<packaging.type>jar</packaging.type>
			</properties>
		</profile>
	</profiles>

	<dependencies>
		<!-- Servlet Spec. Those will be provided by tomcat at runtime -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.41</version>
		</dependency>

		<dependency>
			<groupId>com.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>3.8</version>
		</dependency>

		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<filters>
			<!-- This option enables to read properties from this file and automagically 
				put their values in other files, such as, context.xml -->
			<filter>${config.properties}</filter>
		</filters>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- Export the project as easy to run script -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>1.10</version>
				<configuration>
					<programs>
						<program>
							<mainClass>usi.tagger.utilities.ImportBeamNGDataInTheDb</mainClass>
							<id>import-road-data</id>
						</program>
					</programs>
				</configuration>
			</plugin>
			<!-- Preprare the JAR file -->
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<classifier>classes</classifier>
				</configuration>
				<executions>
					<execution>
						<id>package-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin> -->
			<!-- Prepare the WAR file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
					</archive>
					<webXml>src/main/webapp/WEB-INF/web.xml</webXml>
					<webResources>
						<resource>
							<directory>src/main/resources</directory>
							<includes>
								<include>**/*.js</include>
								<include>**/*.css</include>
								<include>fonts/*.*</include>
								<include>**/*.html</include>
								<include>**/*.jpg</include>
								<include>**/*.png</include>
								<include>**/*.json</include>
							</includes>
						</resource>
						<!-- Enable reading props from config.file and setting all the files 
							in META-INF -->
						<resource>
							<directory>src/main/webapp/META-INF</directory>
							<filtering>true</filtering>
							<targetPath>META-INF</targetPath>
						</resource>
					</webResources>
					<packagingExcludes>**/empty.tmp</packagingExcludes>
				</configuration>
			</plugin>
			<!-- Reads the configuration variables directly from -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${config.properties}</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Fails if the ${config.properties} file does not exists -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M1</version>
				<executions>
					<execution>
						<id>enforce-deploy-properties-exist</id>
						<phase>deploy</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireProperty>
									<property>tomcat.username</property>
									<message>Tomcat username is missing</message>
								</requireProperty>
								<requireProperty>
									<property>tomcat.password</property>
									<message>Tomcat password is missing</message>
								</requireProperty>
								<requireProperty>
									<property>tomcat.url</property>
									<message>Tomcat manager api url is missing</message>
								</requireProperty>
								<requireProperty>
									<property>tomcat.path</property>
									<message>Tomcat deploy path is missing</message>
								</requireProperty>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Shows to console if properties have been defined -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo>Displaying Tomcat properties value</echo>
								<echo>[tomcat.path] ${tomcat.path}</echo>
								<echo>[tomcat.url] ${tomcat.url}</echo>
								<echo>Displaying Tagger properties value</echo>
								<echo>[dbAddress] ${dbAddress}</echo>
								<echo>[dbUsername] ${dbUsername}</echo>
								<echo>[maxNumberOfEvaluators] ${maxNumberOfEvaluators}</echo>
								<echo>[maxNumberOfEvaluationsPerUser]
									${maxNumberOfEvaluationsPerUser}</echo>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Deploys on tomcat reading the properties from ${configuration.properties} -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<server>TomcatServer</server>
					<url>${tomcat.url}</url>
					<username>${tomcat.username}</username>
					<password>${tomcat.password}</password>
					<path>${tomcat.path}</path>
					<update>true</update>
					<ignorePackaging>true</ignorePackaging>
					<contextReloadable>true</contextReloadable>
				</configuration>
				<executions>
					<execution>
						<phase>deploy</phase>
						<goals>
							<goal>deploy-only</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>
												read-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>